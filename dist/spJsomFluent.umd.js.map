{"version":3,"sources":["webpack://spJsom/webpack/universalModuleDefinition","webpack://spJsom/webpack/bootstrap","webpack://spJsom/./src/common.ts","webpack://spJsom/./src/helper/Client.CamlBuilder.ts","webpack://spJsom/./src/helper/webHelper.ts","webpack://spJsom/./src/web.ts","webpack://spJsom/./src/helper/permissionHelper.ts","webpack://spJsom/./src/permission.ts","webpack://spJsom/./src/helper/SPRestFileHelper.ts","webpack://spJsom/./src/helper/listHelper.ts","webpack://spJsom/./src/list.ts","webpack://spJsom/./src/listitem.ts","webpack://spJsom/./src/file.ts","webpack://spJsom/./src/helper/userHelper.ts","webpack://spJsom/./src/user.ts","webpack://spJsom/./src/helper/navigationHelper.ts","webpack://spJsom/./src/navigation.ts","webpack://spJsom/./src/helper/pageHelper.ts","webpack://spJsom/./src/publishingpage.ts","webpack://spJsom/./src/fluent.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CamlOperator","EventRecurranceOverlap","AggregationType","common","reject","deferred","reason","this","get_message","notImplementedPromise","$","Deferred","promise","FilterArray","items","predicate","output","length","push","executeQuery","clientContext","executeQueryAsync","sender","args","resolve","webHelper_WebHelper","WebHelper","context","setWelcomePage","web","url","rootFolder","get_rootFolder","load","set_welcomePage","update","fail","done","setTitle","title","set_title","setLogoUrl","set_siteLogoUrl","activateFeature","featureId","force","get_features","add","SP","FeatureDefinitionScope","createWeb","parentWeb","template","useSamePermissionsAsParent","info","WebCreationInformation","set_url","set_webTemplate","set_useSamePermissionsAsParentSite","newWeb","get_webs","doesWebExist","getAllWebs","get_site","get_rootWeb","toLowerCase","get_serverRelativeUrl","get_url","getWebs","fromWeb","_this","webs","promises","get_count","subWeb","getItemAtIndex","when","apply","web_Web","Web","fluent","_fluent","_helperName","webHelper","chainAction","exists","permissionHelper_PermissionHelper","PermissionHelper","hasWebPermission","permission","get_effectiveBasePermissions","has","hasListPermission","list","hasItemPermission","item","permission_Permission","Permission","permissionHelper","SPRestFileUploader","uploadFileAsArrayBuffer","file","webUrl","listname","filename","progressCallback","getArrayBuffer","error","console","arrayBuffer","options","type","data","processData","headers","accept","X-RequestDigest","jQuery","val","ajax","jqXHR","textStatus","responseText","indexOf","updateListItem","serverRelativeUrl","properties","etag","replace","__metadata","JSON","stringify","content-type","IF-MATCH","X-HTTP-Method","reader","FileReader","onloadend","e","target","result","onerror","readAsArrayBuffer","listHelper_ListHelper","ListHelper","createList","listName","templateId","ListCreationInformation","set_templateType","get_lists","setAlerts","enabled","getByTitle","set_enableAssignToEmail","setListItemProperties","listItem","propertyName","set_item","lists","get_title","createListItemWithContentTypeName","contentTypeName","itemCreateInfo","ListItemCreationInformation","listContentTypes","get_contentTypes","contentTypeId","contentType","get_name","get_id","get_stringValue","addItem","createListItem","loadListItem","viewFields","getFile","getFileByServerRelativeUrl","checkInFile","comment","checkInType","checkIn","uploadFile","ServerRelativeUrl","checkOutFile","checkOut","getList","deleteList","deleteObject","getFileListItem","get_listItemAllFields","getListItemById","id","getItemById","deleteListItemById","getListItems","viewXml","query","CamlQuery","set_viewXml","listItems","getItems","addContentTypeListAssociation","listCts","contentTypes","findContentType","collection","listCt","get_contentTypesEnabled","set_contentTypesEnabled","associatedCt","addExistingContentType","removeContentTypeListAssociation","setDefaultValueOnList","fieldInternalName","defaultValue","fields","get_fields","field","get_internalName","findField","set_defaultValue","list_List","List","listHelper","delete","listitem_ListItem","ListItem","createWithContentType","deleteById","getAll","file_File","File","getListItem","userHelper_UserHelper","UserHelper","getUserByEmail","email","loadUser","get_web","ensureUser","getUserById","get_siteUsers","getById","user","getCurrentUser","get_currentUser","getCurrentUserProfileProperties","SOD","executeFunc","currentUser","profile","UserProfiles","PeopleManager","getMyProperties","get_userProfileProperties","getCurrentUserManager","peopleManager","user_email","get_email","userProfilePropertiesForUser","UserProfilePropertiesForUser","userProfileProps","getUserProfilePropertiesFor","user_User","User","userHelper","emailOrAccountName","registerDependency","Dependency","UserProfile","navigationHelper_NavigationHelper","NavigationHelper","deleteQuicklaunchNodes","deleteNodes","get_navigation","get_quickLaunch","deleteTopNavigationNodes","get_topNavigationBar","deleteQuicklaunchNode","deleteNode","deleteTopQuicklaunchNode","setCurrentNavigation","navigationType","showSubsites","showPages","allProperties","get_allProperties","setOptions","nav","Publishing","Navigation","WebNavigationSettings","NavigationType","Inherit","get_currentNavigation","set_source","StandardNavigationSource","inheritFromParentWeb","Managed","StructuralWithSiblings","portalProvider","StructuralChildrenOnly","enumerator","getEnumerator","itemsToDelete","moveNext","get_current","node","createQuicklaunchNode","asLastNode","createNode","createTopNavigationNode","NavigationNodeCreationInformation","set_asLastNode","navigation_Navigation","navigationHelper","location","NavigationLocation","Quicklaunch","TopNavigation","deleteAllNodes","StringBuilder","toString","CamlBuilder","camlClauses","orderByFields","requireAll","viewFieldsString","groupByFieldsString","aggregationFieldsString","begin","buildQuery","setFilter","caml","hasWhereClause","sb","directCaml","recurrence","totalCamlPairs","openOperators","clausesAdded","fieldRef","ascending","groupBy","orderBy","aggregations","queryOptionText","queryOptions","viewScope","totalClauses","rowLimit","getNullClause","retVal","getClause","operation","valueType","getDateTimeClause","includeTime","addNullClause","addTextClause","addBooleanClause","addNumberClause","addDateTimeClause","addLookupClause","clause","addAggregation","aggregationType","recurrenceQuery","overlapType","addViewField","addViewFields","fieldRefs","addGroupByField","addGroupByFields","addOrderBy","OrderBy","addDaysToDate","date","days","setDate","getDate","pageHelper_PageHelper","PageHelper","createPublishingPage","layoutUrl","pageInfo","PublishingPageInformation","set_name","set_pageLayoutListItem","publishingWeb","PublishingWeb","getPublishingWeb","publishingPage","addPublishingPage","pageListItem","get_listItem","getPublishingLayout","setLayout","camlBuilder","Eq","pages","page","publishingpage_PublishingPage","PublishingPage","pageHelper","getLayout","fluent_Fluent","Fluent","commands","results","dependencies","settings","timeoutMilliseconds","enableDependencyTimeout","totalCommands","withContext","withSettings","setting","withDependency","dependency","resultPromise","execute","expiry","setTimeout","getAvailableActionCommandCount","loadDependencies","continue","always","clearTimeout","onActionExecuted","onExecuted","onActionExecuting","onExecuting","peekLastCommand","constructor","ActionCommand","command","WhenCommand","action","peekLastResult","success","failChain","whenAll","whenTrue","whenFalse","chain","shift","step","arg1","arg2","arg3","arg4","arg5","arg6","arg7","storeResult","addResult","resolveChain","arg","ActionResult","spDependencies","LoadSodByKey","registerSod","Utilities","Utility","getLayoutsPageUrl","Taxonomy","loadMultiple","count","FluentCommand","_super","__extends"],"mappings":"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","file":"spJsomFluent.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spJsom\"] = factory();\n\telse\n\t\troot[\"spJsom\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\nexport class common {\r\n    public static reject(deferred: JQueryDeferred<any>, reason:string) {\r\n        deferred.reject(this, { get_message: function () { return reason; } } );\r\n    }\r\n    public static notImplementedPromise() : JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        common.reject(deferred, \"Not Implemented\");\r\n        return deferred.promise();\r\n    }\r\n    public static executeQuery = (clientContext: SP.ClientContext) => {\r\n        var deferred = $.Deferred();\r\n        clientContext.executeQueryAsync(\r\n            (sender, args) => {\r\n                deferred.resolve(sender, args);\r\n            },\r\n            (sender, args) => {\r\n                deferred.reject(sender, args);\r\n            }\r\n        );\r\n        return deferred.promise();\r\n    };\r\n    public static FilterArray<T>(items: Array<T>, predicate: any): Array<T> {\r\n        let output = [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (predicate(items[i], i)) {\r\n                output.push(items[i]);\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n}","\"use strict\";   \r\n/*  Script: Client.CamlBuilder\r\n    By: Tim Wheeler\r\n    Version: v7 - Mar 2019\r\n        \r\n    Notes: Date rage overlap query and scope not tested.\r\n        \r\n    TypeScript Example:\r\n        var myAppData = myAppData || {};\r\n(data => {\r\n    var queryContext;\r\n    var listName = \"Tasks\";\r\n    data.query = () => {\r\n        queryContext = {};\r\n        var camlBuilder = new CamlBuilder();\r\n        camlBuilder.addViewFields([\"Title\", \"Priority\"]);\r\n        camlBuilder.addOrderBy(\"DueDate\", false);\r\n        camlBuilder.rowLimit = 4;\r\n        camlBuilder.addDateTimeClause(CamlOperator.Geq, \"DueDate\", camlBuilder.addDaysToDate(new Date(), -7).toISOString(), false);\r\n        camlBuilder.addDateTimeClause(CamlOperator.Leq, \"DueDate\", camlBuilder.addDaysToDate(new Date(), 7).toISOString(), false);\r\n    \r\n        var clientContext = SP.ClientContext.get_current();\r\n        var ctx = clientContext;\r\n        var list = ctx.get_web().get_lists().getByTitle(listName);\r\n        var query = new SP.CamlQuery();\r\n        query.set_viewXml(camlBuilder.viewXml);\r\n        queryContext.items = list.getItems(query);\r\n        ctx.load(queryContext.items);\r\n        queryContext.list = list;\r\n        queryContext.clientContext = clientContext;\r\n        clientContext.executeQueryAsync(onQuerySucceeded, onQueryFailed);\r\n    \r\n    };\r\n    \r\n    function onQuerySucceeded() {\r\n        var items = queryContext.items;\r\n        var listItemInfo = \"\";\r\n        var listItemEnumerator = items.getEnumerator();\r\n        while (listItemEnumerator.moveNext()) {\r\n            var listItem = listItemEnumerator.get_current();\r\n    \r\n            listItemInfo += '\\nTitle: ' + listItem.get_item('Title');\r\n            listItemInfo += ' Overdue: ' + listItem.get_item('Overdue');\r\n        }\r\n        console.log('success ' + listItemInfo);\r\n    }\r\n    function onQueryFailed(sender, args) {\r\n        alert('Request failed. ' + args.get_message() + '\\n' + args.get_stackTrace());\r\n    }\r\n})(myAppData);\r\n*/\r\nexport interface ICamlBuilder {\r\n    query: string;\r\n    viewXml: string;\r\n    viewScope: string;\r\n    viewFields: string;\r\n    totalClauses: number;\r\n    rowLimit: number;\r\n    begin(requireAll: boolean);\r\n    addNullClause(fieldRef: string);\r\n    addTextClause(operation: CamlOperator, fieldRef: string, value: string);\r\n    addNumberClause(operation: CamlOperator, fieldRef: string, value: number);\r\n    addDateTimeClause(operation: CamlOperator, fieldRef: string, value: string, includeTime: boolean);\r\n    addLookupClause(operation: CamlOperator, fieldRef: string, value: string, valueType: string);\r\n    recurrenceQuery(overlapType: EventRecurranceOverlap);\r\n    addViewField(fieldRef: string);\r\n    addViewFields(fieldRefs: Array<string>);\r\n    addGroupByField(fieldRef: string);\r\n    addGroupByFields(fieldRefs: Array<string>);\r\n    addOrderBy(fieldRef: string, ascending: boolean);\r\n    addDaysToDate(date, days);\r\n}\r\n\r\n/// <summary>\r\n///     CAML Operations\r\n/// </summary>\r\nexport enum CamlOperator {\r\n    Contains,\r\n    BeginsWith,\r\n    Eq,\r\n    Geq,\r\n    Leq,\r\n    Lt,\r\n    Gt,\r\n    Neq,\r\n    DateRangesOverlap,\r\n    IsNotNull,\r\n    IsNull\r\n}\r\n\r\nexport enum EventRecurranceOverlap {\r\n    Now,\r\n    Today,\r\n    Week,\r\n    Month,\r\n    Year\r\n}\r\nexport enum AggregationType {\r\n    SUM,\r\n    COUNT,\r\n    AVG,\r\n    MAX,\r\n    MIN,\r\n    STDEV,\r\n    VAR\r\n}\r\nexport class StringBuilder {\r\n    value: string = \"\";\r\n    add(value: string) {\r\n        this.value += value;\r\n    }\r\n    toString() {\r\n        return this.value;\r\n    }\r\n}\r\nexport interface OdataItem {\r\n    property: string;\r\n    name: string;\r\n    value: any;\r\n}\r\nexport interface OdataPair {\r\n    left: OdataPair;\r\n    right: OdataPair;\r\n    type: string;\r\n    func: string;\r\n    property: string;\r\n    name: string;\r\n    value: any;\r\n    args: Array<OdataPair>;\r\n}\r\nexport class CamlBuilder implements ICamlBuilder {\r\n    constructor() {\r\n        this.begin(true);\r\n    }\r\n    private camlClauses: Array<string> = [];\r\n    private orderByFields: Array<OrderBy> = [];\r\n    private requireAll: boolean = true;\r\n    private viewFieldsString: string = \"\";\r\n    private groupByFieldsString: string = \"\";\r\n    private aggregationFieldsString: string = \"\";\r\n    private recurrence: string;\r\n    private directCaml: string;\r\n    private queryOptions: string;\r\n    rowLimit: number;\r\n    viewScope: string;\r\n\r\n    get query(): string {\r\n        return this.buildQuery();\r\n    }\r\n    get viewFields(): string {\r\n        return this.viewFieldsString;\r\n    }\r\n    get totalClauses(): number {\r\n        return this.camlClauses.length;\r\n    }\r\n    setFilter(caml: string) {\r\n            \r\n        var hasWhereClause = caml.indexOf(\"<Where>\") === 0;\r\n        var sb = new StringBuilder();\r\n        if (!hasWhereClause) {\r\n            sb.add(\"<Where>\");\r\n        }\r\n        sb.add(caml);\r\n        if (!hasWhereClause) {\r\n            sb.add(\"</Where>\");\r\n        }\r\n        this.directCaml = sb.toString();\r\n    }\r\n    private buildQuery(): string {\r\n        if (this.recurrence) {\r\n            return `<Where>${this.recurrence}</Where>`;\r\n        }\r\n        var query = \"\";\r\n        var openOperators = 0;\r\n        if (this.directCaml) {\r\n            query += this.directCaml;\r\n        } else if (!this.directCaml && this.camlClauses.length > 0) {\r\n            query += \"<Where>\";\r\n\r\n            //When we have just one clause we can't use AND or OR.\r\n            if (this.camlClauses.length > 1) {\r\n                let totalCamlPairs = this.camlClauses.length - 1;\r\n                while (totalCamlPairs > 0) {\r\n                    query += (this.requireAll ? \"<And>\" : \"<Or>\");\r\n                    totalCamlPairs--;\r\n                    openOperators++;\r\n                }\r\n            }\r\n            var clausesAdded = 0;\r\n\r\n            for (let i = 0; i < this.camlClauses.length; i++) {\r\n                const clause = this.camlClauses[i];\r\n                query += clause;\r\n                clausesAdded++;\r\n                if (clausesAdded > 1) {\r\n                    query += this.requireAll ? \"</And>\" : \"</Or>\";\r\n                    openOperators--;\r\n                }\r\n            }\r\n            query += \"</Where>\";\r\n        }\r\n        if (this.orderByFields.length > 0) {\r\n            query += \"<OrderBy>\";\r\n            for (let i = 0; i < this.orderByFields.length; i++) {\r\n                var item = this.orderByFields[i];\r\n                query += `<FieldRef Name=\"${item.fieldRef}\" Ascending=\"${item.ascending ? \"TRUE\" : \"FALSE\"}\" />`;\r\n            }\r\n            query += \"</OrderBy>\";\r\n        }\r\n        return query;\r\n    }\r\n    get viewXml(): string {\r\n        var viewFields = \"\";\r\n        if (this.viewFields) {\r\n            viewFields = `<ViewFields>${this.viewFields}</ViewFields>`;\r\n        }\r\n        var groupBy = \"\";\r\n        if (this.groupByFieldsString) {\r\n            groupBy = `<GroupBy Collapse=\"TRUE\" GroupLimit=\"1999\">${this.groupByFieldsString}</GroupBy>`;\r\n        }\r\n        var orderBy = \"\";\r\n        if (this.orderByFields && this.orderByFields.length) {\r\n            orderBy = `<OrderBy>`;\r\n            for (let i = 0; i < this.orderByFields.length; i++) {\r\n                orderBy += `<FieldRef Name=\"${this.orderByFields[i].fieldRef}\" Ascending=\"${this.orderByFields[i].ascending ? 'TRUE' : 'FALSE'}\"/>`;\r\n            }\r\n            orderBy += `</OrderBy>`;\r\n        }\r\n        var aggregations = \"\";\r\n        if (this.aggregationFieldsString) {\r\n            aggregations = `<Aggregations Value=\"On\">${this.aggregationFieldsString}</Aggregations>`;\r\n        }\r\n        var queryOptionText = \"\";\r\n        if (this.queryOptions) {\r\n            queryOptionText = `<QueryOptions>\r\n                ${this.queryOptions}\r\n            </QueryOptions>`;\r\n        }\r\n        return `<View${this.viewScope ? \" \" + this.viewScope : \"\"}>${viewFields}<Query>${groupBy}${(this.orderByFields && this.orderByFields.length > 0) || this.totalClauses > 0 || this.directCaml ? this.query : \"\"}${orderBy}</Query>${queryOptionText}${aggregations}${this.rowLimit ? \"<RowLimit>\" + this.rowLimit + \"</RowLimit>\" : \"\"}</View>`;\r\n    }\r\n\r\n    begin(requireAll: boolean) {\r\n        this.camlClauses = [];\r\n        this.requireAll = requireAll;\r\n        this.recurrence = null;\r\n        this.viewFieldsString = \"\";\r\n        this.orderByFields = [];\r\n        this.directCaml = null;\r\n    }\r\n\r\n    getNullClause(fieldRef: string) {\r\n        var retVal = \"\";\r\n        if (fieldRef) {\r\n            retVal = `<IsNull><FieldRef Name=\"${fieldRef}\" /></IsNull>`;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    getClause(operation: CamlOperator, fieldRef: string, value: string, valueType: string): string {\r\n        var retVal = `<${CamlOperator[operation]}><FieldRef Name=\"${fieldRef}\" /><Value Type=\"${valueType}\">${value}</Value></${CamlOperator[operation]}>`;\r\n        return retVal;\r\n    }\r\n    getDateTimeClause(operation: CamlOperator, fieldRef: string, value: string, includeTime: boolean) {\r\n        var retVal = `<${CamlOperator[operation]}><FieldRef Name=\"${fieldRef}\" /><Value Type=\"DateTime\" ${includeTime ? \"IncludeTimeValue='TRUE'\" : \"\"}>${value}</Value></${CamlOperator[operation]}>`;\r\n        return retVal;\r\n    }\r\n    addNullClause(fieldRef: string) {\r\n        this.camlClauses.push(this.getNullClause(fieldRef));\r\n    }\r\n    addTextClause(operation: CamlOperator, fieldRef: string, value: string) {\r\n        this.camlClauses.push(this.getClause(operation, fieldRef, value, \"Text\"));\r\n    }\r\n    addBooleanClause(operation: CamlOperator, fieldRef: string, value: boolean) {\r\n        this.camlClauses.push(this.getClause(operation, fieldRef, value ? \"1\" : \"0\", \"Integer\"));\r\n    }\r\n    addNumberClause(operation: CamlOperator, fieldRef: string, value: number) {\r\n        this.camlClauses.push(this.getClause(operation, fieldRef, value.toString(), \"Number\")); //TODO: verify type\r\n    }\r\n    addDateTimeClause(operation: CamlOperator, fieldRef: string, value: string, includeTime: boolean) {\r\n        this.camlClauses.push(this.getDateTimeClause(operation, fieldRef, value, includeTime));\r\n    }\r\n\r\n    addLookupClause(operation: CamlOperator, fieldRef: string, value: string, valueType: string) {\r\n        var clause = `<${CamlOperator[operation]}><FieldRef Name=\"${fieldRef}\" LookupId=\"True\" /><Value Type=\"${valueType}\">${value}</Value></${CamlOperator[operation]}>`;\r\n        this.camlClauses.push(clause);\r\n    }\r\n    addAggregation(fieldRef: string, aggregationType: AggregationType) {\r\n        this.aggregationFieldsString = this.aggregationFieldsString + `<FieldRef Name=\"${fieldRef.replace(\" \", \"_x0020_\")}\" Type=\"${AggregationType[aggregationType]}\" />`;\r\n    }\r\n    recurrenceQuery(overlapType: EventRecurranceOverlap) {\r\n        this.recurrence = `<DateRangesOverlap><FieldRef Name=\"EventDate\"/><FieldRef Name=\"EndDate\"/><FieldRef Name=\"RecurrenceID\"/><Value><${EventRecurranceOverlap[overlapType]}/></Value></DateRangesOverlap>`;\r\n        this.queryOptions += \r\n            `<CalendarDate>2018-01-01T12:00:00Z</CalendarDate>\r\n            <RecurrencePatternXMLVersion>v3</RecurrencePatternXMLVersion>\r\n            <ExpandRecurrence>TRUE</ExpandRecurrence>`;\r\n    }\r\n    addViewField(fieldRef: string) {\r\n        this.viewFieldsString = this.viewFieldsString + `<FieldRef Name=\"${fieldRef.replace(\" \", \"_x0020_\")}\"/>`;\r\n    }\r\n    addViewFields(fieldRefs: Array<string>) {\r\n        for (var i = 0; i < fieldRefs.length; i++) {\r\n            this.addViewField(fieldRefs[i]);\r\n        }\r\n    }\r\n    addGroupByField(fieldRef: string) {\r\n        this.groupByFieldsString = this.groupByFieldsString + `<FieldRef Name=\"${fieldRef.replace(\" \", \"_x0020_\")}\"/>`;\r\n    }\r\n    addGroupByFields(fieldRefs: Array<string>) {\r\n        for (var i = 0; i < fieldRefs.length; i++) {\r\n            this.addGroupByField(fieldRefs[i]);\r\n        }\r\n    }\r\n    addOrderBy(fieldRef: string, ascending: boolean) {\r\n        var orderBy = new OrderBy();\r\n        orderBy.fieldRef = fieldRef;\r\n        orderBy.ascending = ascending;\r\n        this.orderByFields.push(orderBy);\r\n    }\r\n    addDaysToDate(date, days) {\r\n        date.setDate(date.getDate() + days);\r\n        return date;\r\n    }\r\n        \r\n}\r\nexport class OrderBy {\r\n    fieldRef: string;\r\n    ascending: boolean;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { common } from \"../common\"\r\n\r\nexport class WebHelper {\r\n    constructor(context: SP.ClientContext) {\r\n        this.context = context;\r\n    }\r\n    private context: SP.ClientContext;\r\n    public setWelcomePage(web: SP.Web, url: string): JQueryPromise<SP.Folder> {\r\n            var deferred = $.Deferred();\r\n            var rootFolder = web.get_rootFolder();\r\n            this.context.load(web);\r\n            this.context.load(rootFolder);\r\n            rootFolder.set_welcomePage(url);\r\n            rootFolder.update();\r\n            common.executeQuery(this.context)\r\n                .fail((sender, args) => { deferred.reject(sender, args); })\r\n                .done(() => {\r\n                    deferred.resolve(rootFolder);\r\n                });\r\n        return deferred.promise() as JQueryPromise<SP.Folder>;\r\n    }\r\n    public setTitle(web: SP.Web, title: string): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(web);\r\n        web.set_title(title);\r\n        web.update();\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve();\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n    public setLogoUrl(web: SP.Web, url: string): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(web);\r\n        (<any>web).set_siteLogoUrl(url); //TS definition missing here.\r\n        web.update();\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve();\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n    public activateFeature(web: SP.Web, featureId: SP.Guid, force:boolean): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(web);\r\n        web.get_features().add(featureId, force, SP.FeatureDefinitionScope.web);\r\n        web.update();\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve();\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n    public createWeb(name: string, parentWeb: SP.Web, title: string, template: string, useSamePermissionsAsParent:boolean = true): JQueryPromise<SP.Web> {\r\n            var deferred = $.Deferred();\r\n            var info = new SP.WebCreationInformation();\r\n            info.set_url(name);\r\n            info.set_title(title);\r\n            info.set_webTemplate(template);\r\n            info.set_useSamePermissionsAsParentSite(useSamePermissionsAsParent);\r\n            var newWeb = parentWeb.get_webs().add(info);\r\n            this.context.load(newWeb);\r\n            common.executeQuery(this.context)\r\n                .fail((sender, args) => { deferred.reject(sender, args); })\r\n                .done(() => {\r\n                    deferred.resolve(newWeb);\r\n                });\r\n        return deferred.promise() as JQueryPromise<SP.Web>;\r\n    }\r\n    public doesWebExist(url: string): JQueryPromise<any> {\r\n            var deferred = $.Deferred();\r\n            var output = [] as Array<SP.Web>;\r\n            this.getAllWebs(this.context, this.context.get_site().get_rootWeb(), output)\r\n                .fail((sender, args) => { deferred.reject(sender, args); })\r\n                .done(() => {\r\n                    for (var i = 0; i < output.length; i++) {\r\n                        if (url.toLowerCase() === output[i].get_serverRelativeUrl() || url.toLowerCase() === output[i].get_url()) {\r\n                            deferred.resolve(true);\r\n                            return;\r\n                        }\r\n                    }\r\n                    deferred.resolve(false);\r\n                });\r\n            return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n    public getWebs(fromWeb: SP.Web): JQueryPromise<Array<SP.Web>> {\r\n            var deferred = $.Deferred();\r\n            var output = [] as Array<SP.Web>;\r\n            this.getAllWebs(this.context, fromWeb, output)\r\n                .fail((sender, args) => { deferred.reject(sender, args); })\r\n                .done(() => {\r\n                    deferred.resolve(output);\r\n                });\r\n        return deferred.promise() as JQueryPromise<Array<SP.Web>>;\r\n    }\r\n    private getAllWebs(context: SP.ClientContext, web: SP.Web, output: Array<SP.Web>): JQueryPromise<Array<SP.Web>> {\r\n        var deferred = $.Deferred();\r\n        var webs = web.get_webs();\r\n        context.load(webs);\r\n        common.executeQuery(context)\r\n            .fail((sender, args) => {\r\n                deferred.reject(sender, args);\r\n            })\r\n            .done(() => {\r\n                var promises = [];\r\n                for (var i = 0; i < webs.get_count(); i++) {\r\n                    var subWeb = webs.getItemAtIndex(i);\r\n                    output.push(subWeb);\r\n                    promises.push(this.getAllWebs(context, subWeb, output));\r\n                }\r\n                if (promises.length) {\r\n                    $.when.apply($, promises)\r\n                        .fail((sender, args) => {\r\n                            deferred.reject(sender, args);\r\n                        })\r\n                        .done(() => {\r\n                            deferred.resolve();\r\n                        });\r\n                } else {\r\n                    deferred.resolve();\r\n                }\r\n            });\r\n        return deferred.promise() as JQueryPromise<Array<SP.Web>>;\r\n    }\r\n\r\n}","import { WebHelper } from \"./helper/webHelper\";\r\nimport { Fluent } from \"./fluent\"\r\n\r\nexport class Web {\r\n    constructor(fluent: Fluent) {\r\n        this._fluent = fluent;\r\n        this.webHelper = new WebHelper(fluent.context);\r\n    }\r\n    private _fluent = null as Fluent;\r\n    private readonly _helperName: string = \"web\";\r\n    private webHelper = null as WebHelper;\r\n    /**\r\n      * Set the web welcome page.  The url should be relative to the root folder of the web. \r\n      * Result: SP.Folder\r\n      * Example: setWelcomePage(context.get_web(), \"pages/default.aspx\")\r\n      */\r\n    public setWelcomePage(web: SP.Web, url: string): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.setWelcomePage`, () => {\r\n            return this.webHelper.setWelcomePage(web, url);\r\n        });\r\n        \r\n    }\r\n    /**\r\n      * Create a new sub web.\r\n      * Result: SP.Web\r\n      * name: Forms part of the URL, don't include slash\r\n      * template: template id and configuration value\r\n      * Example: create(\"SubWebName\", SP.ClientContext.get_current().get_rootWeb(), \"My Web Name\", \"CMSPUBLISHING#0\")\r\n      * \r\n      * @remarks\r\n      * For templates See: https://blogs.technet.microsoft.com/praveenh/2010/10/21/sharepoint-templates-and-their-ids/\r\n      */\r\n    public create(name: string, parentWeb: SP.Web, title: string, template: string, useSamePermissionsAsParent: boolean = true): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.create`, () => {\r\n            return this.webHelper.createWeb(name, parentWeb, title, template, useSamePermissionsAsParent);\r\n        });\r\n        \r\n    }\r\n    /**\r\n      * Check if a web exists\r\n      * Result: boolean\r\n      * url: server relative url\r\n      * Example: .exists(\"/sites/mysubweb\")\r\n      */\r\n    public exists(url: string): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.exists`, () => {\r\n            return this.webHelper.doesWebExist(url);\r\n        });\r\n        \r\n    }\r\n    /**\r\n      * Get and load all webs starting from a web and its children\r\n      * Result: Array<SP.Web>\r\n      * Example: getWebs(SP.ClientContext.get_current().get_rootWeb())\r\n      */\r\n    public getWebs(fromWeb: SP.Web): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.getWebs`, () => {\r\n            return this.webHelper.getWebs(fromWeb);\r\n        });\r\n        \r\n    }\r\n\r\n    /**\r\n      * Set site title\r\n      * Result: void\r\n      * Example: setTitle(SP.ClientContext.get_current().get_web(), \"My Title\")\r\n      */\r\n    public setTitle(web: SP.Web, title:string): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.setTitle`, () => {\r\n            return this.webHelper.setTitle(web, title);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n      * Set site logo url\r\n      * Result: void\r\n      * Example: setLogoUrl(SP.ClientContext.get_current().get_web(), \"/site/images/logo.jpg\")\r\n      */\r\n    public setLogoUrl(web: SP.Web, url: string): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.setLogoUrl`, () => {\r\n            return this.webHelper.setLogoUrl(web, url);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n      * Activate feature\r\n      * Result: void\r\n      * Example: activateFeature(SP.ClientContext.get_current().get_web(), new SP.Guid('15a572c6-e545-4d32-897a-bab6f5846e18'))\r\n      */\r\n    public activateFeature(web: SP.Web, featureId: SP.Guid, force:boolean = true): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.activateFeature`, () => {\r\n            return this.webHelper.activateFeature(web, featureId, force);\r\n        });\r\n    }\r\n    \r\n}","import { common } from \"../common\"\r\n\r\nexport class PermissionHelper {\r\n    constructor(context: SP.ClientContext) {\r\n        this.context = context;\r\n    }\r\n    private context: SP.ClientContext;\r\n    public hasWebPermission(permission: SP.PermissionKind, web: SP.Web): JQueryPromise<boolean> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(web, 'EffectiveBasePermissions');\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(web.get_effectiveBasePermissions().has(permission));\r\n            });\r\n        return deferred.promise() as JQueryPromise<boolean>;\r\n    }\r\n    public hasListPermission(permission: SP.PermissionKind, list: SP.List): JQueryPromise<boolean> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(list, 'EffectiveBasePermissions');\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(list.get_effectiveBasePermissions().has(permission));\r\n            });\r\n        return deferred.promise() as JQueryPromise<boolean>;\r\n    }\r\n    public hasItemPermission(permission: SP.PermissionKind, item: SP.ListItem): JQueryPromise<boolean> {\r\n            var deferred = $.Deferred();\r\n            this.context.load(item, 'EffectiveBasePermissions');\r\n            common.executeQuery(this.context)\r\n                .fail((sender, args) => { deferred.reject(sender, args); })\r\n                .done(() => {\r\n                    deferred.resolve(item.get_effectiveBasePermissions().has(permission));\r\n                });\r\n        return deferred.promise() as JQueryPromise<boolean>;\r\n    }\r\n}","import { Fluent } from \"./fluent\"\r\nimport { PermissionHelper } from \"./helper/permissionHelper\";\r\n\r\nexport class Permission {\r\n    constructor(fluent: Fluent) {\r\n        this._fluent = fluent;\r\n        this.permissionHelper = new PermissionHelper(fluent.context);\r\n    }\r\n    private _fluent = null as Fluent;\r\n    private readonly _helperName: string = \"permission\";\r\n    private permissionHelper = null as PermissionHelper;\r\n    /**\r\n    * Check if the current user has specified Web permission\r\n    * Result: boolean\r\n    * Example: hasWebPermission(SP.PermissionKind.createSSCSite, context.get_web())\r\n    */\r\n    public hasWebPermission(permission: SP.PermissionKind, web: SP.Web): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.hasWebPermission`, () => {\r\n            return this.permissionHelper.hasWebPermission(permission, web);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Check if the current user has specified List permission\r\n    * Result: boolean\r\n    * Example: hasListPermission(SP.PermissionKind.addListItems, context.get_web().get_lists().getByTitle(\"MyList\"))\r\n    */\r\n    public hasListPermission(permission: SP.PermissionKind, list: SP.List): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.hasListPermission`, () => {\r\n            return this.permissionHelper.hasListPermission(permission, list);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Check if the current user has specified ListItem permission\r\n    * Result: boolean\r\n    * Example: hasItemPermission(SP.PermissionKind.editListItems, context.get_web().get_lists().getByTitle(\"MyList\").getItemById(0))\r\n    */\r\n    public hasItemPermission(permission: SP.PermissionKind, item: SP.ListItem): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.hasItemPermission`, () => {\r\n            return this.permissionHelper.hasItemPermission(permission, item);\r\n        });\r\n        \r\n    }\r\n}","// This has moved to /src/Common/js\r\n\r\n//Author: Tim Wheeler (http://timwheeler.io)\r\n//Purpose: Upload a file to a SharePoint library using REST and jQuery\r\ninterface IProgressCallback {\r\n    (percentComplete: number): void;\r\n}\r\nexport class SPRestFileUploader {\r\n    public uploadFileAsArrayBuffer(file: File, webUrl: string, listname: string, filename: string, progressCallback: IProgressCallback = null): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        this.getArrayBuffer(file)\r\n            .fail((error) => {\r\n                console.error(\"Get file buffer failed: \" + error);\r\n                deferred.reject(error);\r\n            })\r\n            .done((arrayBuffer: any) => {\r\n                let options = {\r\n                    url: `${webUrl}/_api/web/lists/getByTitle('${listname}')/RootFolder/Files/Add(url='${filename}', overwrite=true)`,\r\n                    type: \"POST\",\r\n                    data: arrayBuffer,\r\n                    processData: false,\r\n                    headers: {\r\n                        \"accept\": \"application/json;odata=verbose\",\r\n                        \"X-RequestDigest\": jQuery(\"#__REQUESTDIGEST\").val(),\r\n                    }\r\n                } as any;\r\n                $.ajax(options)\r\n                    .fail((jqXHR, textStatus) => {\r\n                        if (jqXHR && jqXHR.responseText && jqXHR.responseText.indexOf(\"The security validation for this page is invalid\") > -1) {\r\n                            console.error(\"SharePoint Page Validation has expired, please refresh.\");\r\n                            deferred.reject(jqXHR, \"SharePoint Page Validation has expired, please save your work and refresh the page.\");\r\n                        }\r\n                        else {\r\n                            console.error(\"Upload file failed: \" + textStatus);\r\n                            deferred.reject(jqXHR, textStatus);\r\n                        }\r\n                    })\r\n                    .done((data: any, textStatus: string, jqXHR: JQueryXHR) => {\r\n                        if (data.d) {\r\n                            deferred.resolve(data.d);\r\n                        }\r\n                        else {\r\n                            deferred.resolve(data);\r\n                        }\r\n                    });\r\n            });\r\n        return deferred.promise();\r\n    }\r\n    public updateListItem(webUrl: string, serverRelativeUrl: string, properties: any, etag: string = \"*\") {\r\n        if (etag) {\r\n            etag = etag.replace(/{|}/g, \"\").toLowerCase();\r\n        }\r\n\r\n        if (typeof (properties.__metadata) == typeof (undefined)) {\r\n            properties.__metadata = { 'type': 'SP.ListItem' };\r\n        }\r\n        var url = `${webUrl}/_api/Web/GetFileByServerRelativeUrl('${serverRelativeUrl}')/ListItemAllFields `;\r\n        // This call does not return response content from the server.\r\n        return $.ajax({\r\n            url: url,\r\n            type: \"POST\",\r\n            data: JSON.stringify(properties),\r\n            headers: {\r\n                \"X-RequestDigest\": $(\"#__REQUESTDIGEST\").val(),\r\n                \"content-type\": \"application/json;odata=verbose\",\r\n                \"IF-MATCH\": etag,\r\n                \"X-HTTP-Method\": \"MERGE\"\r\n            }\r\n        } as any);\r\n    }\r\n    private getArrayBuffer(file: File) {\r\n        var deferred = $.Deferred();\r\n        var reader = new FileReader();\r\n        reader.onloadend = (e: any) => {\r\n            deferred.resolve(e.target.result);\r\n        }\r\n        reader.onerror = (e: any) => {\r\n            deferred.reject(e.target.error);\r\n        }\r\n        reader.readAsArrayBuffer(file);\r\n        return deferred.promise();\r\n    }\r\n}","import { common } from \"../common\"\r\nimport * as FileUpload from \"./SPRestFileHelper\"\r\nexport class ListHelper {\r\n    constructor(context: SP.ClientContext) {\r\n        this.context = context;\r\n    }\r\n    private context: SP.ClientContext;\r\n\r\n    public createList(web: SP.Web, listName: string, templateId: number): JQueryPromise<SP.List> {\r\n        var deferred = $.Deferred();\r\n        var list = null as SP.List;\r\n        var info = new SP.ListCreationInformation();\r\n        info.set_title(listName);\r\n        info.set_templateType(templateId);\r\n        var list = web.get_lists().add(info);\r\n        this.context.load(list);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(list);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.List>;\r\n    }\r\n    public setAlerts(web: SP.Web, listName: string, enabled:boolean): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        var list = web.get_lists().getByTitle(listName);\r\n        this.context.load(list);\r\n        (<any>list).set_enableAssignToEmail(enabled); //Not in typescript definitions currently.  //TODO: test \r\n        list.update();\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve();\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n    public setListItemProperties(listItem: SP.ListItem, properties: any): JQueryPromise<SP.ListItem> {\r\n        var deferred = $.Deferred();\r\n        for (var propertyName in properties) {\r\n            if (typeof (properties[propertyName]) !== typeof (undefined)) {\r\n                listItem.set_item(propertyName, properties[propertyName]);\r\n            }\r\n        }\r\n        listItem.update();\r\n        this.context.load(listItem);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(listItem);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ListItem>;\r\n    }\r\n    public exists(web: SP.Web, listName: string): JQueryPromise<SP.ListItem> {\r\n        var deferred = $.Deferred();\r\n        var lists = web.get_lists();\r\n        this.context.load(lists);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                for (var i = 0; i < lists.get_count(); i++) {\r\n                    if (lists.getItemAtIndex(i).get_title().toLowerCase() === listName.toLowerCase()) {\r\n                        deferred.resolve(true);\r\n                        return;\r\n                    }\r\n                }\r\n                deferred.resolve(false);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ListItem>;\r\n    }\r\n    public createListItemWithContentTypeName(web: SP.Web, listName: string, contentTypeName: string, properties: any): JQueryPromise<SP.ListItem> {\r\n        var deferred = $.Deferred();\r\n        var clientContext = this.context;\r\n        var list = web.get_lists().getByTitle(listName) as SP.List;\r\n        var itemCreateInfo = new SP.ListItemCreationInformation();\r\n\r\n        var listContentTypes = list.get_contentTypes();\r\n        clientContext.load(listContentTypes);\r\n        common.executeQuery(clientContext)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                var contentTypeId = null;\r\n                for (let i = 0; i < listContentTypes.get_count(); i++) {\r\n                    let contentType = listContentTypes.getItemAtIndex(i) as SP.ContentType;\r\n                    if (contentType.get_name() === contentTypeName) {\r\n                        contentTypeId = contentType.get_id().get_stringValue();\r\n                        break;\r\n                    }\r\n                }\r\n                var listItem = list.addItem(itemCreateInfo);\r\n                if (contentTypeId) {\r\n                    listItem.set_item('ContentTypeId', contentTypeId);\r\n                }\r\n                for (var propertyName in properties) {\r\n                    if (typeof (properties[propertyName]) !== typeof (undefined)) {\r\n                        listItem.set_item(propertyName, properties[propertyName]);\r\n                    }\r\n                }\r\n                listItem.update();\r\n                clientContext.load(listItem);\r\n                common.executeQuery(clientContext)\r\n                    .fail((sender, args) => { deferred.reject(sender, args); })\r\n                    .done(() => {\r\n                        deferred.resolve(listItem);\r\n                    });\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ListItem>;\r\n\r\n    }\r\n    public createListItem(web: SP.Web, listName: string, properties: any): JQueryPromise<SP.ListItem> {\r\n        var deferred = $.Deferred();\r\n        var clientContext = this.context;\r\n        var list = web.get_lists().getByTitle(listName) as SP.List;\r\n        var itemCreateInfo = new SP.ListItemCreationInformation();\r\n        var contentTypeId = null;\r\n        var listItem = list.addItem(itemCreateInfo);\r\n        //TODO: validate this works with People, taxonomy and lookup fields.\r\n        for (var propertyName in properties) {\r\n            if (typeof (properties[propertyName]) !== typeof (undefined)) {\r\n                listItem.set_item(propertyName, properties[propertyName]);\r\n            }\r\n        }\r\n        listItem.update();\r\n        clientContext.load(listItem);\r\n        common.executeQuery(clientContext)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(listItem);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ListItem>;\r\n    }\r\n   \r\n    private loadListItem(listItem: SP.ListItem, viewFields: Array<string> = null): JQueryPromise<SP.ListItem> {\r\n        var deferred = $.Deferred();\r\n        if (viewFields && viewFields.length) {\r\n            this.context.load(listItem, viewFields as any);\r\n        } else {\r\n            this.context.load(listItem);\r\n        }\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(listItem);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ListItem>;\r\n    }\r\n    public getFile(serverRelativeUrl: string): JQueryPromise<SP.File> {\r\n        var deferred = $.Deferred();\r\n        var file = this.context.get_site().get_rootWeb().getFileByServerRelativeUrl(serverRelativeUrl);\r\n        this.context.load(file);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(file);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.File>;\r\n    }\r\n    public checkInFile(web: SP.Web, serverRelativeUrl: string, comment: string, checkInType: SP.CheckinType): JQueryPromise<SP.File> {\r\n        var deferred = $.Deferred();\r\n        var file = web.getFileByServerRelativeUrl(serverRelativeUrl);\r\n        this.context.load(file);\r\n        file.checkIn(comment, checkInType);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(file);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.File>;\r\n    }\r\n    public uploadFile(web: SP.Web, listname: string, file: File, filename:string): JQueryPromise<SP.File> {\r\n        var deferred = $.Deferred();\r\n        if (!filename) {\r\n            filename = file.name;\r\n        }\r\n        this.context.load(web);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                var upload = new FileUpload.SPRestFileUploader();\r\n                upload.uploadFileAsArrayBuffer(file, web.get_url(), listname, filename)\r\n                    .fail((jqXHR, textStatus) => {\r\n                        deferred.reject(jqXHR, textStatus);\r\n                    })\r\n                    .done((data) => {\r\n                        var file = web.getFileByServerRelativeUrl(data.ServerRelativeUrl);\r\n                        this.context.load(file);\r\n                        common.executeQuery(this.context)\r\n                            .fail((sender, args) => { deferred.reject(sender, args); })\r\n                            .done(() => {\r\n                                deferred.resolve(file);\r\n                            });\r\n                    });        \r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.File>;\r\n    }\r\n    public checkOutFile(web: SP.Web, serverRelativeUrl: string): JQueryPromise<SP.File> {\r\n        var deferred = $.Deferred();\r\n        var file = web.getFileByServerRelativeUrl(serverRelativeUrl);\r\n        this.context.load(file);\r\n        file.checkOut();\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(file);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.File>;\r\n    }\r\n    public getList(web: SP.Web, listName: string): JQueryPromise<SP.List> {\r\n        var deferred = $.Deferred();\r\n        var list = web.get_lists().getByTitle(listName);\r\n        this.context.load(list);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(list);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.List>;\r\n    }\r\n    public deleteList(web: SP.Web, listName: string): JQueryPromise<SP.List> {\r\n        var deferred = $.Deferred();\r\n        var list = web.get_lists().getByTitle(listName);\r\n        this.context.load(list);\r\n        list.deleteObject();\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve();\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.List>;\r\n    }\r\n    public getFileListItem(web: SP.Web, serverRelativeUrl: string, viewFields: Array<string> = null): JQueryPromise<SP.ListItem> {\r\n        var file = web.getFileByServerRelativeUrl(serverRelativeUrl);\r\n        var listItem = file.get_listItemAllFields();\r\n        return this.loadListItem(listItem);\r\n    }\r\n    public getListItemById(web: SP.Web, listName: string, id: number, viewFields: Array<string> = null): JQueryPromise<SP.ListItem> {\r\n        var listItem = web.get_lists().getByTitle(listName).getItemById(id);\r\n        return this.loadListItem(listItem, viewFields);\r\n    }\r\n\r\n    public deleteListItemById(web: SP.Web, listName: string, id: number): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        var listItem = web.get_lists().getByTitle(listName).getItemById(id);\r\n        this.context.load(listItem);\r\n        listItem.deleteObject(); \r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve();\r\n            });\r\n        return deferred.promise();\r\n    }\r\n    public getListItems(web: SP.Web, listName: string, viewXml: string): JQueryPromise<SP.ListItemCollection> {\r\n        var deferred = $.Deferred();\r\n        var list = web.get_lists().getByTitle(listName);\r\n        var query = new SP.CamlQuery();\r\n        if (!viewXml) {\r\n            viewXml = \"<View><Query></Query></Where>\";\r\n        }\r\n        query.set_viewXml(viewXml);\r\n        var listItems = list.getItems(query);\r\n        this.context.load(listItems);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(listItems);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ListItemCollection>;\r\n    }\r\n    \r\n    \r\n    public addContentTypeListAssociation(web: SP.Web, listName: string, contentTypeName: string): JQueryPromise<SP.ContentType> {\r\n        var deferred = $.Deferred();\r\n        var list = web.get_lists().getByTitle(listName);\r\n        \r\n        var listCts = list.get_contentTypes();\r\n        this.context.load(list);\r\n        this.context.load(listCts);\r\n        var contentTypes = this.context.get_site().get_rootWeb().get_contentTypes();\r\n        var findContentType = (collection: SP.ContentTypeCollection, name: string) => {\r\n            for (let i = 0; i < collection.get_count(); i++) {\r\n                if (collection.getItemAtIndex(i).get_name().toLowerCase() === name.toLowerCase()) {\r\n                    return collection.getItemAtIndex(i);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        this.context.load(contentTypes);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                let contentType = findContentType(contentTypes, contentTypeName) as SP.ContentType;\r\n                if (!contentType) {\r\n                    common.reject(deferred, `Content Type ${contentTypeName} not found`);\r\n                    return;\r\n                }\r\n                //check if the CT is already associated\r\n                let listCt = findContentType(listCts, contentTypeName) as SP.ContentType;\r\n                if (listCt) {\r\n                    //already associated\r\n                    deferred.resolve(listCt);\r\n                }\r\n                else {\r\n                    if (!list.get_contentTypesEnabled()) {\r\n                        list.set_contentTypesEnabled(true);//enable custom cts on the list.\r\n                    }\r\n                    var associatedCt = list.get_contentTypes().addExistingContentType(contentType);\r\n                    list.update();\r\n                    common.executeQuery(this.context)\r\n                        .fail((sender, args) => { deferred.reject(sender, args); })\r\n                        .done(() => {\r\n                            deferred.resolve(associatedCt);\r\n                        });\r\n                }\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ContentType>;\r\n    }\r\n    public removeContentTypeListAssociation(web: SP.Web, listName: string, contentTypeName: string): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        var list = web.get_lists().getByTitle(listName);\r\n        var listCts = list.get_contentTypes();\r\n        this.context.load(list);\r\n        this.context.load(listCts);\r\n        var findContentType = (collection: SP.ContentTypeCollection, name: string) => {\r\n            for (let i = 0; i < collection.get_count(); i++) {\r\n                if (collection.getItemAtIndex(i).get_name().toLowerCase() === name.toLowerCase()) {\r\n                    return collection.getItemAtIndex(i);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                let listCt = findContentType(listCts, contentTypeName) as SP.ContentType;\r\n                if (listCt) {\r\n                    listCt.deleteObject();\r\n                    list.update();\r\n                    common.executeQuery(this.context)\r\n                        .fail((sender, args) => { deferred.reject(sender, args); })\r\n                        .done(() => {\r\n                            deferred.resolve();\r\n                        });\r\n                }\r\n                else {\r\n                    deferred.resolve(); //not found, nothing to do.\r\n                }\r\n            });\r\n        return deferred.promise();\r\n    }\r\n    public setDefaultValueOnList(web: SP.Web, listName: string, fieldInternalName: string, defaultValue: any): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        var list = web.get_lists().getByTitle(listName);\r\n        var fields = list.get_fields();\r\n        this.context.load(list);\r\n        this.context.load(fields);\r\n        var findField = (collection: SP.FieldCollection, name: string) => {\r\n            for (let i = 0; i < collection.get_count(); i++) {\r\n                if (collection.getItemAtIndex(i).get_internalName().toLowerCase() === name.toLowerCase()) {\r\n                    return collection.getItemAtIndex(i);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                let field = findField(fields, fieldInternalName) as SP.Field;\r\n                if (field) {\r\n                    field.set_defaultValue(defaultValue);\r\n                    field.update()\r\n                    common.executeQuery(this.context)\r\n                        .fail((sender, args) => { deferred.reject(sender, args); })\r\n                        .done(() => {\r\n                            deferred.resolve();\r\n                        });\r\n                }\r\n                else {\r\n                    common.reject(deferred, `Field ${fieldInternalName} not found`);\r\n                }\r\n            });\r\n        return deferred.promise();\r\n    }\r\n}","import { ListHelper } from \"./helper/listHelper\";\r\nimport { Fluent } from \"./fluent\"\r\nexport class List {\r\n    constructor(fluent: Fluent) {\r\n        this.fluent = fluent;\r\n        this.listHelper = new ListHelper(fluent.context);\r\n    }\r\n    private fluent = null as Fluent;\r\n    private listHelper = null as ListHelper;\r\n    private readonly _helperName: string = \"list\";\r\n    /**\r\n    * Create new list \r\n    * Example: create(context.get_web(), \"My Task List\", 107)\r\n    * templateId - See: https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee541191(v%3Doffice.15)#remarks\r\n    */\r\n    public create(web: SP.Web, listName: string, templateId: number): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.create`, () => {\r\n            return this.listHelper.createList(web, listName, templateId);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Check if the list exists\r\n    * Result: boolean\r\n    * Example: exists(context.get_web(), \"My List\")\r\n    */\r\n    public exists(web: SP.Web, listName: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.exists`, () => {\r\n            return this.listHelper.exists(web, listName);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Delete a list\r\n    * Result: void\r\n    * Example: delete(context.get_web(), \"My List\")\r\n    */\r\n    public delete(web: SP.Web, listName: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.delete`, () => {\r\n            return this.listHelper.deleteList(web, listName);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Get a list\r\n    * Result: SP.List\r\n    * Example: get(context.get_web(), \"My List\")\r\n    */\r\n    public get(web: SP.Web, listName: string): Fluent {\r\n        //TODO: test\r\n        return this.fluent.chainAction(`${this._helperName}.get`, () => {\r\n            return this.listHelper.getList(web, listName);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Adds a Content Type to a List.  Resolves the new associated list content type.\r\n    * Result: SP.ContentType\r\n    * Example: addContentTypeListAssociation(context.get_web(), \"My List\", \"My Content Type Name\")\r\n    */\r\n    public addContentTypeListAssociation(web: SP.Web, listName: string, contentTypeName: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.addContentTypeListAssociation`, () => {\r\n            return this.listHelper.addContentTypeListAssociation(web, listName, contentTypeName);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Removes a Content Type associated from a list.\r\n    * Result: void\r\n    * Example: removeContentTypeListAssociation(context.get_web(), \"My List\", \"My Content Type Name\")\r\n    */\r\n    public removeContentTypeListAssociation(web: SP.Web, listName: string, contentTypeName: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.removeContentTypeListAssociation`, () => {\r\n            return this.listHelper.removeContentTypeListAssociation(web, listName, contentTypeName);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Sets a default value on a field in a list\r\n    * Result: void\r\n    * Example: setDefaultValueOnList(context.get_web(), \"My Task List\", \"ClientId\", 123)\r\n    */\r\n    public setDefaultValueOnList(web: SP.Web, listName: string, fieldInternalName: string, defaultValue: any): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.setDefaultValueOnList`, () => {\r\n            return this.listHelper.setDefaultValueOnList(web, listName, fieldInternalName, defaultValue);\r\n        });\r\n        \r\n    }\r\n     /**\r\n    * Enable email alerts on a list \r\n    * Result: void\r\n    * Example: setAlerts(context.get_web(), \"My Task List\", true)\r\n    * Note: will not work for 2010/2013\r\n    */\r\n    public setAlerts(web: SP.Web, listName: string, enabled: boolean): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.setAlerts`, () => {\r\n            return this.listHelper.setAlerts(web, listName, enabled);\r\n        });\r\n        \r\n    }\r\n}","import { ListHelper } from \"./helper/listHelper\";\r\nimport { Fluent } from \"./fluent\"\r\nexport class ListItem {\r\n    constructor(fluent: Fluent) {\r\n        this.fluent = fluent;\r\n        this.listHelper = new ListHelper(fluent.context);\r\n    }\r\n    private fluent = null as Fluent;\r\n    private listHelper = null as ListHelper;\r\n    private readonly _helperName: string = \"listItem\";\r\n    /**\r\n    * Update a list item with properties\r\n    * Result: SP.ListItem\r\n    * Example: update(listItem, { 'Title': 'Title value here', ClientId: 123 })\r\n    */\r\n    public update(listItem: SP.ListItem, properties: any): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.update`, () => {\r\n            return this.listHelper.setListItemProperties(listItem, properties);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Create a list item, specifying the Content Type\r\n    * Result: SP.ListItem\r\n    * Example: createWithContentType(context.get_web(), \"My list\", \"My Content Type Name\", { 'Title': 'Title value here', ClientId: 123 })\r\n    */\r\n    public createWithContentType(web: SP.Web, listName: string, contentTypeName: string, properties: any): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.createWithContentType`, () => {\r\n            return this.listHelper.createListItemWithContentTypeName(web, listName, contentTypeName, properties);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Create new list item with optional property values\r\n    * Example: create(context.get_web(), \"MyList\", properties)\r\n    * Note: Properties are an object with Property/Value, where property\r\n    *       is the internal field name.\r\n    *       Eg; var properties = {\r\n                Title: \"My title\",\r\n                PersonOrGroupField: personValue,\r\n                MultiChoiceField: [\"Second\", \"Third\"],\r\n                ChoiceField: \"Second\",\r\n                NumberField: 1234\r\n            };\r\n            For personValue you can pass through the user Id or a SP.UserFieldValue such as:\r\n            var personValue = new SP.FieldUserValue();\r\n            personValue.set_lookupId(_spPageContextInfo.userId);\r\n    */\r\n    public create(web: SP.Web, listName: string, properties: any): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.create`, () => {\r\n            return this.listHelper.createListItem(web, listName, properties);\r\n        });\r\n        \r\n    }\r\n    \r\n    /**\r\n    * Get the listitem using the ID with optional view fields\r\n    * Result: SP.ListItem\r\n    * Example: get(context.get_web(), \"MyList\", 1, [\"ID\", \"Title\"])\r\n    */\r\n    public get(web: SP.Web, listName: string, id: number, viewFields: Array<string> = null): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.get`, () => {\r\n            return this.listHelper.getListItemById(web, listName, id, viewFields);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Get the listitem for a File using the ID with optional view fields\r\n    * Result: SP.ListItem\r\n    * Example: getFileListItem(context.get_web(), \"/sites/site/documents/mydoc.docx\", [\"ID\", \"Title\", \"FileLeafRef\"])\r\n    */\r\n    public getFileListItem(web: SP.Web, serverRelativeUrl: string, viewFields: Array<string> = null): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.getFileListItem`, () => {\r\n            return this.listHelper.getFileListItem(web, serverRelativeUrl, viewFields);\r\n        });\r\n        \r\n    }\r\n    \r\n    /**\r\n    * Delete List Item\r\n    * Result: void\r\n    * Example: deleteById(context.get_web(), \"MyList\", 7)\r\n    */\r\n    public deleteById(web: SP.Web, listName: string, id: number): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.deleteById`, () => {\r\n            return this.listHelper.deleteListItemById(web, listName, id);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Execute a query using supplied CAML.  \r\n    * Returns: SP.ListItemCollection\r\n    * Example: query(context.get_web(), \"MyList\", \"<View><Query><Where><In><FieldRef Name='ID' /><Values><Value Type='Number'>1</Value><Value Type='Number'>2</Value></Values></In></View></Query></Where>\")\r\n    */\r\n    public query(web: SP.Web, listName: string, viewXml: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.query`, () => {\r\n            return this.listHelper.getListItems(web, listName, viewXml);\r\n        });\r\n    }\r\n    /**\r\n    * Get all list items in a list\r\n    * Returns: SP.ListItemCollection\r\n    * Example: getAll(context.get_web(), \"MyList\")\r\n    */\r\n    public getAll(web: SP.Web, listName: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.query`, () => {\r\n            return this.listHelper.getListItems(web, listName, \"<View></View>\");\r\n        });\r\n    }\r\n    \r\n}","import { ListHelper } from \"./helper/listHelper\";\r\nimport { Fluent } from \"./fluent\"\r\nexport class File {\r\n    constructor(fluent: Fluent) {\r\n        this.fluent = fluent;\r\n        this.listHelper = new ListHelper(fluent.context);\r\n    }\r\n    private fluent = null as Fluent;\r\n    private listHelper = null as ListHelper;\r\n    private readonly _helperName: string = \"file\";\r\n\r\n    /**\r\n    * Get a file from a document library\r\n    * Result: SP.File\r\n    * Example: get(_spPageContextInfo.siteServerRelativeUrl + \"/documents/doc.docx\")\r\n    */\r\n    public get(serverRelativeUrl: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.getListItem`, () => {\r\n            return this.listHelper.getFile(serverRelativeUrl);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Get the list item for the file\r\n    * Result: SP.ListItem\r\n    * Example: getListItem(_spPageContextInfo.siteServerRelativeUrl + \"/documents/doc.docx\")\r\n    */\r\n    public getListItem(web: SP.Web, serverRelativeUrl: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.getListItem`, () => {\r\n            return this.listHelper.getFileListItem(web, serverRelativeUrl);\r\n        });\r\n    }\r\n    /**\r\n    * Check in a file\r\n    * Result: SP.File\r\n    * Example: checkIn(SP.ClientContext.get_current().get_web(), _spPageContextInfo.webServerRelativeUrl + '/pages/mypage.aspx', \"Checked in by spJsomFluent\", SP.CheckinType.majorCheckIn)\r\n    */\r\n    public checkIn(web: SP.Web, serverRelativeUrl: string, comment: string, checkInType: SP.CheckinType): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.checkInFile`, () => {\r\n            return this.listHelper.checkInFile(web, serverRelativeUrl, comment, checkInType);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Check out a file\r\n    * Result: SP.File\r\n    * Example: checkOut(SP.ClientContext.get_current().get_web(), _spPageContextInfo.webServerRelativeUrl + '/pages/mypage.aspx', \"Checked in by spJsomFluent\", SP.CheckinType.majorCheckIn)\r\n    */\r\n    public checkOut(web: SP.Web, serverRelativeUrl: string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.checkOutFile`, () => {\r\n            return this.listHelper.checkOutFile(web, serverRelativeUrl);\r\n        });\r\n\r\n    }\r\n    /**\r\n    * Upload a file to a library\r\n    * Result: SP.File\r\n    * Example: uploadFile(SP.ClientContext.get_current().get_web(), \"Documents\", file)\r\n    */\r\n    public uploadFile(web: SP.Web, listName: string, file: any, filename?:string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.uploadFile`, () => {\r\n            return this.listHelper.uploadFile(web, listName, file, filename);\r\n        });\r\n\r\n    }\r\n}","import { common } from \"../common\"\r\n\r\nexport class UserHelper {\r\n    constructor(context: SP.ClientContext) {\r\n        this.context = context;\r\n    }\r\n    private context: SP.ClientContext;\r\n    \r\n    public getUserByEmail(email: string): JQueryPromise<SP.User> {\r\n        return this.loadUser(this.context.get_web().ensureUser(email));\r\n    }\r\n    public getUserById(id: number): JQueryPromise<SP.User> {\r\n        return this.loadUser(this.context.get_web().get_siteUsers().getById(id));\r\n    }\r\n    private loadUser(user: SP.User): JQueryPromise<SP.User> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(user);\r\n        this.context.executeQueryAsync(\r\n            (sender, args) => {\r\n                deferred.resolve(user);\r\n            },\r\n            (sender, args) => {\r\n                console.error(args.get_message());\r\n                deferred.reject(sender, args);\r\n            }\r\n        );\r\n        return deferred.promise() as JQueryPromise<SP.User>;\r\n    }\r\n    public getCurrentUser(): JQueryPromise<SP.UserProfiles.PersonProperties> {\r\n        var deferred = $.Deferred();\r\n        var user = this.context.get_web().get_currentUser();\r\n        this.context.load(user);\r\n        this.context.executeQueryAsync(\r\n            (sender, args) => {\r\n                deferred.resolve(user);\r\n            },\r\n            (sender, args) => {\r\n                console.error(args.get_message());\r\n                deferred.reject(sender, args);\r\n            }\r\n        );\r\n        return deferred.promise() as JQueryPromise<SP.UserProfiles.PersonProperties>;\r\n    }\r\n    public getCurrentUserProfileProperties(): JQueryPromise<SP.UserProfiles.PersonProperties> {\r\n            var deferred = $.Deferred();\r\n            SP.SOD.executeFunc('userprofile', 'SP.UserProfiles.PeopleManager', () => {\r\n                var clientContext = this.context;\r\n                var currentUser = clientContext.get_web().get_currentUser();\r\n                var peopleManager = new SP.UserProfiles.PeopleManager(clientContext);\r\n                var profile = peopleManager.getMyProperties();\r\n                clientContext.load(currentUser);\r\n                clientContext.load(profile);\r\n                clientContext.executeQueryAsync(\r\n                    (sender, args) => {\r\n                        deferred.resolve(profile.get_userProfileProperties());\r\n                    },\r\n                    (sender, args) => {\r\n                        console.error(args.get_message());\r\n                        deferred.reject(sender, args);\r\n                    }\r\n                );\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.UserProfiles.PersonProperties>;\r\n    }\r\n    public getCurrentUserManager(): JQueryPromise<SP.User> {\r\n            var deferred = $.Deferred();\r\n            var peopleManager = new SP.UserProfiles.PeopleManager(this.context);\r\n            var profilePropertyNames = [\"Manager\"];\r\n            var user_email = this.context.get_web().get_currentUser().get_email();\r\n            var userProfilePropertiesForUser = new SP.UserProfiles.UserProfilePropertiesForUser(this.context,\r\n                \"i:0#.f|membership|\" + user_email,\r\n                profilePropertyNames);  //TODO: check for better mechanism to constructure login\r\n            var userProfileProps = peopleManager.getUserProfilePropertiesFor(userProfilePropertiesForUser);\r\n\r\n            this.context.load(userProfilePropertiesForUser);\r\n            common.executeQuery(this.context)\r\n                .fail((sender, args) => { deferred.reject(sender, args); })\r\n                .done(() => {\r\n                    if (userProfileProps[0]) {\r\n                        var user = this.context.get_web().ensureUser(userProfileProps[0]);\r\n                        this.context.load(user);\r\n                        common.executeQuery(this.context)\r\n                            .fail((sender, args) => { deferred.reject(sender, args); })\r\n                            .done(() => {\r\n                                deferred.resolve(user);\r\n                            });\r\n                    } else {\r\n                        deferred.resolve(null);\r\n                    }\r\n            })\r\n        return deferred.promise() as JQueryPromise<SP.User>;\r\n    }\r\n}","import { UserHelper } from \"./helper/userHelper\";\r\nimport { Fluent, Dependency } from \"./fluent\"\r\nimport { common } from \"./common\";\r\n\r\nexport class User {\r\n    constructor(fluent: Fluent) {\r\n        this._fluent = fluent;\r\n        this.userHelper = new UserHelper(fluent.context);\r\n    }\r\n    private _fluent = null as Fluent;\r\n    private readonly _helperName: string = \"userProfile\";\r\n    private userHelper = null as UserHelper;\r\n    /**\r\n    * Get User by email or account name\r\n    * Result: SP.User\r\n    * Example: get(\"my@email.address\")\r\n    * Example: get(\"i:0#.f|membership|my@email.address\")\r\n    */\r\n    public get(emailOrAccountName:string): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.get`, () => {\r\n            return this.userHelper.getUserByEmail(emailOrAccountName);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Get a user by their Id\r\n    * Result: SP.User\r\n    * Example: getById(15)\r\n    */\r\n    public getById(id: number): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.getById`, () => {\r\n            return this.userHelper.getUserById(id);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Get the current user\r\n    * Result: SP.User\r\n    * Example: getCurrentUser()\r\n    */\r\n    public getCurrentUser(): Fluent {\r\n        return this._fluent.chainAction(`${this._helperName}.getCurrentUser`, () => {\r\n            return this.userHelper.getCurrentUser();\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Get the profile properties for the current user\r\n    * Result: SP.UserProfiles.PersonProperties\r\n    * Example: getCurrentUserProfileProperties()\r\n    */\r\n    public getCurrentUserProfileProperties(): Fluent {\r\n        this._fluent.registerDependency(Dependency.UserProfile);\r\n        return this._fluent.chainAction(`${this._helperName}.getCurrentUserProfileProperties`, () => {\r\n            return this.userHelper.getCurrentUserProfileProperties();\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Get the manager for the current user\r\n    * Result: SP.User\r\n    * Example: getCurrentUserManager()\r\n    */\r\n    public getCurrentUserManager(): Fluent {\r\n        this._fluent.registerDependency(Dependency.UserProfile);\r\n        return this._fluent.chainAction(`${this._helperName}.getCurrentUserManager`, () => {\r\n            return this.userHelper.getCurrentUserManager();\r\n        });\r\n        \r\n    }\r\n}","import { common } from \"../common\"\r\nimport { NavigationType } from \"../fluent\";\r\n\r\nexport class NavigationHelper {\r\n    constructor(context: SP.ClientContext) {\r\n        this.context = context;\r\n    }\r\n    private context: SP.ClientContext;\r\n    public deleteQuicklaunchNodes(web: SP.Web): JQueryPromise<any> {\r\n        return this.deleteNodes(web.get_navigation().get_quickLaunch());\r\n    }\r\n    public deleteTopNavigationNodes(web: SP.Web): JQueryPromise<any> {\r\n        return this.deleteNodes(web.get_navigation().get_topNavigationBar());\r\n    }\r\n    public deleteQuicklaunchNode(web: SP.Web, title: string): JQueryPromise<any> {\r\n        return this.deleteNode(web.get_navigation().get_quickLaunch(), title);\r\n    }\r\n    public deleteTopQuicklaunchNode(web: SP.Web, title: string): JQueryPromise<any> {\r\n        return this.deleteNode(web.get_navigation().get_topNavigationBar(), title);\r\n    }\r\n    \r\n    public setCurrentNavigation(web: SP.Web, navigationType: NavigationType, showSubsites: boolean = true, showPages:boolean = true): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        const siblingsPropertyName = \"__NavigationShowSiblings\";\r\n        const includeTypesPropertyName = \"__CurrentNavigationIncludeTypes\";\r\n        var allProperties = web.get_allProperties();\r\n        this.context.load(web);\r\n        this.context.load(allProperties);\r\n        var setOptions = () => {\r\n            if (showPages && showSubsites) {\r\n                allProperties.set_item(includeTypesPropertyName, \"3\");\r\n            } else if (showPages && !showSubsites) {\r\n                allProperties.set_item(includeTypesPropertyName, \"2\");\r\n            }\r\n            else if (!showPages && showSubsites) {\r\n                allProperties.set_item(includeTypesPropertyName, \"1\");\r\n            }\r\n            else if (!showPages && !showSubsites) {\r\n                allProperties.set_item(includeTypesPropertyName, \"0\");\r\n            }\r\n        };\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                var nav = new SP.Publishing.Navigation.WebNavigationSettings(this.context, web);\r\n                switch (navigationType) {\r\n                    case NavigationType.Inherit:\r\n                        nav.get_currentNavigation().set_source(SP.Publishing.Navigation.StandardNavigationSource.inheritFromParentWeb);\r\n                        break;\r\n                    case NavigationType.Managed:\r\n                        common.reject(deferred, \"Not implemented\");\r\n                        break;\r\n                    case NavigationType.StructuralWithSiblings:\r\n                        nav.get_currentNavigation().set_source(SP.Publishing.Navigation.StandardNavigationSource.portalProvider);\r\n                        allProperties.set_item(siblingsPropertyName, \"True\");\r\n                        setOptions();\r\n                        web.update();\r\n                        break;\r\n                    case NavigationType.StructuralChildrenOnly:\r\n                        nav.get_currentNavigation().set_source(SP.Publishing.Navigation.StandardNavigationSource.portalProvider);\r\n                        allProperties.set_item(siblingsPropertyName, \"False\");\r\n                        setOptions();\r\n                        web.update();\r\n                        break;\r\n                    default:\r\n                        common.reject(deferred, \"Unknown Navigation Type\");\r\n                }   \r\n                nav.update(null);\r\n                common.executeQuery(this.context)\r\n                    .fail((sender, args) => { deferred.reject(sender, args); })\r\n                    .done(() => {\r\n                        deferred.resolve();\r\n                    });\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n\r\n    private deleteNodes(nav: SP.NavigationNodeCollection): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(nav);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                var enumerator = nav.getEnumerator();\r\n                var itemsToDelete = [];\r\n                while (enumerator.moveNext()) {\r\n                    itemsToDelete.push(enumerator.get_current());\r\n                }\r\n                for (let i = 0; i < itemsToDelete.length; i++) {\r\n                    itemsToDelete[i].deleteObject();\r\n                }\r\n                common.executeQuery(this.context)\r\n                    .fail((sender, args) => { deferred.reject(sender, args); })\r\n                    .done(() => {\r\n                        deferred.resolve();\r\n                    });\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n    private deleteNode(nav: SP.NavigationNodeCollection, title: string): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(nav);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                var enumerator = nav.getEnumerator();\r\n                var itemsToDelete = [];\r\n                while (enumerator.moveNext()) {\r\n                    var node = enumerator.get_current();\r\n                    if (node.get_title() === title) {\r\n                        itemsToDelete.push(node);\r\n                    }\r\n                }\r\n                for (let i = 0; i < itemsToDelete.length; i++) {\r\n                    itemsToDelete[i].deleteObject();\r\n                }\r\n                common.executeQuery(this.context)\r\n                    .fail((sender, args) => { deferred.reject(sender, args); })\r\n                    .done(() => {\r\n                        deferred.resolve();\r\n                    });\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n    public createQuicklaunchNode(web: SP.Web, title:string, url:string, asLastNode:boolean = true): JQueryPromise<SP.NavigationNode> {\r\n        return this.createNode(web.get_navigation().get_quickLaunch(), title, url, asLastNode);\r\n    }\r\n    public createTopNavigationNode(web: SP.Web, title: string, url: string, asLastNode: boolean = true): JQueryPromise<SP.NavigationNode> {\r\n        return this.createNode(web.get_navigation().get_topNavigationBar(), title, url, asLastNode);\r\n    }\r\n    private createNode(nav:SP.NavigationNodeCollection, title: string, url: string, asLastNode: boolean = true): JQueryPromise<SP.NavigationNode> {\r\n        var deferred = $.Deferred();\r\n        this.context.load(nav);\r\n        var info = new SP.NavigationNodeCreationInformation();\r\n        info.set_title(title);\r\n        info.set_url(url);\r\n        info.set_asLastNode(asLastNode);\r\n        var node = nav.add(info);\r\n        this.context.load(nav);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(node);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.NavigationNode>;\r\n    }\r\n}","import { NavigationHelper } from \"./helper/navigationHelper\";\r\nimport { Fluent, NavigationLocation, NavigationType, Dependency } from \"./fluent\"\r\nexport class Navigation {\r\n    constructor(fluent: Fluent) {\r\n        this.fluent = fluent;\r\n        this.navigationHelper = new NavigationHelper(fluent.context);\r\n    }\r\n    private fluent = null as Fluent;\r\n    private navigationHelper = null as NavigationHelper;\r\n    private readonly _helperName: string = \"navigation\";\r\n\r\n    /**\r\n    * Create new navigation node\r\n    * Result: SP.NavigationNode\r\n    * Example: createNode(context.get_web(), NavigationLocation.Quicklaunch, \"Test Node\", \"/sites/mysite/pages/default.aspx\")\r\n    */\r\n    public createNode(web: SP.Web, location: NavigationLocation, title: string, url: string, asLastNode: boolean = true): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.createNode`, () => {\r\n            if (location == NavigationLocation.Quicklaunch) {\r\n                return this.navigationHelper.createQuicklaunchNode(web, title, url, asLastNode);\r\n            }\r\n            else if (location == NavigationLocation.TopNavigation) {\r\n                return this.navigationHelper.createTopNavigationNode(web, title, url, asLastNode);\r\n            } else {\r\n                throw \"Unknown location \" + location;\r\n            }\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Delete all navigation nodes for the web\r\n    * Result: void\r\n    * Example: deleteAllNodes(context.get_web(), NavigationLocation.Quicklaunch)\r\n    */\r\n    public deleteAllNodes(web: SP.Web, location: NavigationLocation): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.deleteAllNodes`, () => {\r\n            if (location == NavigationLocation.Quicklaunch) {\r\n                return this.navigationHelper.deleteQuicklaunchNodes(web);\r\n            }\r\n            else if (location == NavigationLocation.TopNavigation) {\r\n                return this.navigationHelper.deleteTopNavigationNodes(web);\r\n            } else {\r\n                throw \"Unknown location \" + location;\r\n            }\r\n\r\n\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Delete all navigation nodes that match the supplied title for the web\r\n    * Result: void\r\n    * Example: deleteNode(context.get_web(), NavigationLocation.Quicklaunch, \"My link title\")\r\n    */\r\n    public deleteNode(web: SP.Web, location: NavigationLocation, title:string ): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.deleteNode`, () => {\r\n            if (location == NavigationLocation.Quicklaunch) {\r\n                return this.navigationHelper.deleteQuicklaunchNode(web, title);\r\n            }\r\n            else if (location == NavigationLocation.TopNavigation) {\r\n                return this.navigationHelper.deleteTopQuicklaunchNode(web, title);\r\n            } else {\r\n                throw \"Unknown location \" + location;\r\n            }\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Set navigation for the web\r\n    * Result: void\r\n    * Example: setCurrentNavigation(context.get_web(), 3, true, true)\r\n    * Note: showSubsites and showPages is only applicable for NavigationType.StructuralChildrenOnly (3)\r\n    */\r\n    public setCurrentNavigation(web: SP.Web, type: NavigationType, showSubsites: boolean = false, showPages:boolean = false): Fluent {\r\n        this.fluent.registerDependency(Dependency.Publishing);\r\n        return this.fluent.chainAction(`${this._helperName}.setCurrentNavigation`, () => {\r\n            return this.navigationHelper.setCurrentNavigation(web, type, showSubsites, showPages);\r\n        });\r\n        \r\n    }\r\n}","import { common } from \"../common\"\r\nimport * as spData from \"./Client.CamlBuilder\"\r\nexport class PageHelper {\r\n    constructor(context: SP.ClientContext) {\r\n        this.context = context;\r\n    }\r\n    private context: SP.ClientContext;\r\n    public createPublishingPage(web: SP.Web, name: string, layoutUrl: string, title:string): JQueryPromise<SP.Publishing.PublishingPage> {\r\n        var deferred = $.Deferred();\r\n        if (!title) {\r\n            title = name.replace(\".aspx\",\"\");\r\n        }\r\n        var file = this.context.get_site().get_rootWeb().getFileByServerRelativeUrl(layoutUrl);\r\n        var listItem = file.get_listItemAllFields();\r\n        this.context.load(listItem);\r\n        var pageInfo = new SP.Publishing.PublishingPageInformation();\r\n        pageInfo.set_name(name);\r\n        pageInfo.set_pageLayoutListItem(listItem);\r\n        var publishingWeb = SP.Publishing.PublishingWeb.getPublishingWeb(this.context, web);\r\n        this.context.load(publishingWeb);\r\n        var publishingPage = publishingWeb.addPublishingPage(pageInfo);\r\n        this.context.load(publishingPage);\r\n        var pageListItem = publishingPage.get_listItem();\r\n        this.context.load(pageListItem);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                pageListItem.set_item(\"Title\", title);\r\n                pageListItem.update();\r\n                common.executeQuery(this.context)\r\n                    .fail((sender, args) => { deferred.reject(sender, args); })\r\n                    .done(() => {\r\n                        deferred.resolve(publishingPage);\r\n                    });\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.Publishing.PublishingPage>;\r\n    }\r\n    public getPublishingLayout(serverRelativeUrl: string): JQueryPromise<SP.ListItem> {\r\n        var deferred = $.Deferred();\r\n        var file = this.context.get_site().get_rootWeb().getFileByServerRelativeUrl(serverRelativeUrl);\r\n        var listItem = file.get_listItemAllFields();\r\n        this.context.load(listItem);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                deferred.resolve(listItem);\r\n            });\r\n        return deferred.promise() as JQueryPromise<SP.ListItem>;\r\n    }\r\n    public setLayout(web: SP.Web, name: string, layoutUrl: string): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        var file = this.context.get_site().get_rootWeb().getFileByServerRelativeUrl(layoutUrl);\r\n        var listItem = file.get_listItemAllFields();\r\n        this.context.load(listItem);\r\n\r\n        var camlBuilder = new spData.CamlBuilder();\r\n        camlBuilder.addTextClause(spData.CamlOperator.Eq, \"FileLeafRef\", name);\r\n        var list = web.get_lists().getByTitle(\"Pages\");\r\n        var query = new SP.CamlQuery();\r\n        query.set_viewXml(camlBuilder.viewXml);\r\n        var pages = list.getItems(query);\r\n        this.context.load(pages);\r\n        common.executeQuery(this.context)\r\n            .fail((sender, args) => { deferred.reject(sender, args); })\r\n            .done(() => {\r\n                if (pages.get_count() === 0) {\r\n                    deferred.reject(this, { get_message: () => { return \"Page not found\" } });\r\n                }\r\n                var page = pages.getItemAtIndex(0);\r\n                page.set_item(\"PublishingPageLayout\", layoutUrl);\r\n                page.update();\r\n                common.executeQuery(this.context)\r\n                    .fail((sender, args) => { deferred.reject(sender, args); })\r\n                    .done(() => {\r\n                        deferred.resolve();\r\n                    });\r\n            });\r\n        return deferred.promise() as JQueryPromise<any>;\r\n    }\r\n\r\n}","import { Fluent, Dependency } from \"./fluent\"\r\nimport { PageHelper } from \"./helper/pageHelper\"\r\n\r\nexport class PublishingPage {\r\n    constructor(fluent: Fluent) {\r\n        this.fluent = fluent;\r\n        this.pageHelper = new PageHelper(fluent.context);\r\n    }\r\n    private fluent = null as Fluent;\r\n    private readonly _helperName: string = \"publishingPage\";\r\n    private pageHelper: PageHelper;\r\n    /**\r\n    * Creates a new publishing page.\r\n    * Result: SP.Publishing.PublishingPage\r\n    * Example: .publishingPage.create(SP.ClientContext.get_current().get_web(), \"Home.aspx\", _spPageContextInfo.siteServerRelativeUrl + \"/_catalogs/masterpage/BlankWebPartPage.aspx\")\r\n    */\r\n    public create(web: SP.Web, name: string, layoutUrl: string, title:string): Fluent {\r\n        this.fluent.registerDependency(Dependency.Publishing);\r\n        return this.fluent.chainAction(`${this._helperName}.create`, () => {\r\n            return this.pageHelper.createPublishingPage(web, name, layoutUrl, title);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Gets a page layout.\r\n    * Result: SP.ListItem\r\n    * Example: .publishingPage.getLayout(_spPageContextInfo.siteServerRelativeUrl + \"/_catalogs/masterpage/BlankWebPartPage.aspx\")\r\n    * \r\n    */\r\n    public getLayout(serverRelativeUrl:string): Fluent {\r\n        return this.fluent.chainAction(`${this._helperName}.getLayout`, () => {\r\n            return this.pageHelper.getPublishingLayout(serverRelativeUrl);\r\n        });\r\n        \r\n    }\r\n    /**\r\n    * Changes layout for a publishing page.\r\n    * Result: void\r\n    * Example: .publishingPage.setLayout(SP.ClientContext.get_current().get_web(), \"Home.aspx\", _spPageContextInfo.siteServerRelativeUrl + \"/_catalogs/masterpage/BlankWebPartPage.aspx\")\r\n    */\r\n    public setLayout(web: SP.Web, name: string, layoutUrl: string): Fluent {\r\n        this.fluent.registerDependency(Dependency.Publishing);\r\n        return this.fluent.chainAction(`${this._helperName}.setLayout`, () => {\r\n            return this.pageHelper.setLayout(web, name, layoutUrl);\r\n        });\r\n    }\r\n}","// spJsom - Fluent\r\nimport { Web } from \"./web\"\r\nimport { Permission } from \"./permission\"\r\nimport { List } from \"./list\"\r\nimport { ListItem } from \"./listitem\"\r\nimport { File } from \"./file\"\r\nimport { User } from \"./user\"\r\nimport { Navigation } from \"./navigation\"\r\nimport { PublishingPage } from \"./publishingpage\"\r\nimport { common } from \"./common\"\r\n\r\nexport class Fluent  {\r\n    public context: SP.ClientContext;\r\n    private commands: Array<FluentCommand> = [];\r\n    private results: Array<ActionResult> = [];\r\n    private resultPromise: JQueryDeferred<any>;\r\n    private onExecuting: any;\r\n    private onExecuted: any;\r\n    private dependencies: Array<Dependency> = [];\r\n    public settings: ISettings = { timeoutMilliseconds: 5000, enableDependencyTimeout: true };\r\n    private totalCommands = 0;\r\n    public withContext(context: SP.ClientContext): Fluent {\r\n        this.context = context;\r\n        return this;\r\n    }\r\n    public withSettings(settings: ISettings): Fluent {\r\n        for (var setting in settings) {\r\n            if (typeof (this.settings[setting]) !== typeof (undefined)) {\r\n                this.settings[setting] = settings[setting];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    public withDependency(dependency: Dependency): Fluent {\r\n        this.registerDependency(dependency);\r\n        return this;\r\n    }\r\n    get promise(): JQueryPromise<any> {\r\n        return this.resultPromise.promise();\r\n    }\r\n    get permission(): Permission {\r\n        return new Permission(this);\r\n    }\r\n    get list(): List {\r\n        return new List(this);\r\n    }\r\n    get listItem(): ListItem {\r\n        return new ListItem(this);\r\n    }\r\n    get file(): File {\r\n        return new File(this);\r\n    }\r\n    get publishingPage(): PublishingPage {\r\n        return new PublishingPage(this);\r\n    }\r\n    get web(): Web {\r\n        return new Web(this);\r\n    }\r\n    get user(): User{\r\n        return new User(this);\r\n    }\r\n    get navigation(): Navigation {\r\n        return new Navigation(this);\r\n    }\r\n\r\n    public execute(): JQueryPromise<Array<ActionResult>> {\r\n        this.resultPromise = $.Deferred();\r\n        //The dependency timeout is fired if it takes too long to load to avoid promise never completing.\r\n        if (this.settings.enableDependencyTimeout) {\r\n            var expiry = setTimeout(() => {\r\n                common.reject(this.resultPromise, \"Timeout waiting for dependencies to load\");\r\n            }, this.settings.timeoutMilliseconds);\r\n        }\r\n        //To track progress\r\n        this.totalCommands = this.getAvailableActionCommandCount();\r\n        this.loadDependencies()\r\n            .done(() => {\r\n                this.continue();\r\n            })\r\n            .always(() => {\r\n                if (this.settings.enableDependencyTimeout) {\r\n                    clearTimeout(expiry);\r\n                }\r\n            });\r\n        return this.resultPromise.promise() as JQueryPromise<Array<ActionResult>>;\r\n    }\r\n    public onActionExecuted(onExecuted: OnExecuted): Fluent {\r\n        this.onExecuted = onExecuted;\r\n        return this;\r\n    }\r\n    public onActionExecuting(onExecuting: OnExecuting): Fluent {\r\n        this.onExecuting = onExecuting;\r\n        return this;\r\n    }\r\n    public when(predicate: any) {\r\n        if (this.peekLastCommand() && this.peekLastCommand().constructor !== ActionCommand) {\r\n            throw \"Illegal operation: The last command must be an ActionCommand\";\r\n        }\r\n        var command = new WhenCommand();\r\n        command.action = () => {\r\n            var deferred = $.Deferred();\r\n            var command = this.peekLastResult();\r\n            if (command) {\r\n                if (!command.success) {\r\n                    throw \"Illegal operation: The last command should have succeeded for this call to have been made.  This is an issue in the fluent api\";\r\n                }\r\n                if (predicate(...command.result)) {\r\n                    deferred.resolve();\r\n                }\r\n                else {\r\n                    this.reject(deferred, this, \"Predicate returned false\");\r\n                }\r\n            } else {\r\n                this.failChain(this, \"No action to process for when\");\r\n            }\r\n            return deferred.promise();\r\n        };\r\n        this.commands.push(command);\r\n        return this;\r\n    }\r\n    //Similar to when, but all previous results are passed into the predicate\r\n    public whenAll(predicate: any) : Fluent {\r\n        if (this.peekLastCommand() && this.peekLastCommand().constructor !== ActionCommand) {\r\n            throw \"Illegal operation: The last command must be an ActionCommand\";\r\n        }\r\n        var command = new WhenCommand();\r\n        command.action = () => {\r\n            var deferred = $.Deferred();\r\n            var command = this.peekLastResult();\r\n            if (command) {\r\n                if (!command.success) {\r\n                    throw \"Illegal operation: The last command should have succeeded for this call to have been made.  This is an issue in the fluent api\";\r\n                }\r\n                if (predicate(this.results)) {\r\n                    deferred.resolve();\r\n                }\r\n                else {\r\n                    this.reject(deferred, this, \"Predicate returned false\");\r\n                }\r\n            } else {\r\n                this.failChain(this, \"No action to process for whenAll\");\r\n            }\r\n            return deferred.promise();\r\n        };\r\n        this.commands.push(command);\r\n        return this;\r\n    }\r\n    public whenTrue(): Fluent {\r\n        if (this.peekLastCommand() && this.peekLastCommand().constructor !== ActionCommand) {\r\n            throw \"Illegal operation: The last command must be an ActionCommand\";\r\n        }\r\n        var command = new WhenCommand();\r\n        command.action = () => {\r\n            var deferred = $.Deferred();\r\n            var command = this.peekLastResult();\r\n            if (command) {\r\n                if (!command.success) {\r\n                    throw \"Illegal operation: The last command should have succeeded for this call to have been made.  This is an issue in the fluent api\";\r\n                }\r\n                if (command.result && command.result.length && command.result[0]) {\r\n                    deferred.resolve();\r\n                }\r\n                else {\r\n                    this.reject(deferred, this, \"Result is not true\");\r\n                }\r\n            } else {\r\n                this.failChain(this, \"No action to process for whenTrue\");\r\n            }\r\n            return deferred.promise();\r\n        };\r\n        this.commands.push(command);\r\n        return this;\r\n    }\r\n    public whenFalse(): Fluent {\r\n        if (this.peekLastCommand() && this.peekLastCommand().constructor !== ActionCommand) {\r\n            throw \"Illegal operation: The last command must be an ActionCommand\";\r\n        }\r\n        var command = new WhenCommand();\r\n        command.action = () => {\r\n            var deferred = $.Deferred();\r\n            var command = this.peekLastResult();\r\n            if (command) {\r\n                if (!command.success) {\r\n                    throw \"Illegal operation: The last command should have succeeded for this call to have been made.  This is an issue in the fluent api\";\r\n                }\r\n                if (command.result && command.result.length && !command.result[0]) {\r\n                    deferred.resolve();\r\n                }\r\n                else {\r\n                    this.reject(deferred, this, \"Result is not false\");\r\n                }\r\n            } else {\r\n                this.failChain(this, \"No action to process for whenFalse\");\r\n            }\r\n            return deferred.promise();\r\n        };\r\n        this.commands.push(command);\r\n        return this;\r\n    }\r\n    public chainAction(name: string, action: any) : Fluent {\r\n        var command = new ActionCommand();\r\n        command.name = name;\r\n        command.action = action;\r\n        this.commands.push(command);\r\n        return this;\r\n    }\r\n    public chain(command: ActionCommand): Fluent {\r\n        this.commands.push(command);\r\n        return this;\r\n    }\r\n    public static executeQuery(context: SP.ClientContext) {\r\n        return common.executeQuery(context);\r\n    }\r\n    public registerDependency(dependency: Dependency) {\r\n        if (this.dependencies.indexOf(dependency) === -1) {\r\n            this.dependencies.push(dependency);\r\n        }\r\n    }\r\n    private continue() {\r\n        if (!this.context) {\r\n            throw \"context not set, you must call withContext\";\r\n        }\r\n        var command = this.commands.shift();\r\n        if (command && command.action) {\r\n            if (command.constructor === ActionCommand) {\r\n                if (this.onExecuting) {\r\n                    let step = this.totalCommands - (this.getAvailableActionCommandCount());\r\n                    this.onExecuting((command as ActionCommand).name, step, this.totalCommands);\r\n                }\r\n            }\r\n            var promise = command.action() as JQueryPromise<any>;\r\n            promise.done((arg1, arg2, arg3, arg4, arg5, arg6, arg7) => {\r\n                if (command.constructor === ActionCommand) {\r\n                    let results = [];\r\n                    this.storeResult(arg1, results);\r\n                    this.storeResult(arg2, results);\r\n                    this.storeResult(arg3, results);\r\n                    this.storeResult(arg4, results);\r\n                    this.storeResult(arg5, results);\r\n                    this.storeResult(arg6, results);\r\n                    this.storeResult(arg7, results);\r\n                    this.addResult(command as ActionCommand, true, results);\r\n                    if (this.onExecuted) {\r\n                        this.onExecuted((command as ActionCommand).name, true, results);\r\n                    }\r\n                }\r\n                if (this.commands.length) {\r\n                    this.continue();\r\n                }\r\n                else {\r\n                    this.resolveChain();\r\n                }\r\n            })\r\n                .fail((sender, args) => {\r\n                    if (command.constructor === ActionCommand) {\r\n                        let results = [];\r\n                        this.storeResult(sender, results);\r\n                        this.storeResult(args, results);\r\n                        this.addResult(command as ActionCommand, false, results);\r\n                        if (this.onExecuted) {\r\n                            this.onExecuted((command as ActionCommand).name, false, {sender:sender, args:args});\r\n                        }\r\n                        this.failChain(sender, args);\r\n                        return;\r\n                    }\r\n                    this.resolveChain();\r\n                });\r\n        } else {\r\n            this.resolveChain();\r\n        }\r\n    }\r\n    private storeResult(arg: any, results: Array<any>) {\r\n        if (typeof (arg) !== typeof (undefined)) {\r\n            results.push(arg);\r\n        }\r\n    }\r\n    private resolveChain() {\r\n        this.resultPromise.resolve(this.results);\r\n    }\r\n    private failChain(sender, args) {\r\n        if (typeof (args) == \"string\") {\r\n            args = { get_message: () => { return args } };\r\n        }\r\n        this.resultPromise.reject(sender, args);\r\n    }\r\n    private reject(deferred: JQueryDeferred<any>, sender, args) {\r\n        if (typeof (args) == \"string\") {\r\n            args = { get_message: () => { return args } };\r\n        }\r\n        deferred.reject(sender, args);\r\n    }\r\n    private addResult(command: ActionCommand, success: boolean, results: Array<any>) {\r\n        var result = new ActionResult();\r\n        result.name = command.name;\r\n        result.success = success;\r\n        result.result = results;\r\n        this.results.push(result);\r\n    }\r\n    private loadDependencies(): JQueryPromise<any> {\r\n        var deferred = $.Deferred();\r\n        let spDependencies = [\"SP.js\", \"SP.Runtime.js\"];\r\n        for (let i = 0; i < this.dependencies.length; i++) {\r\n            switch (this.dependencies[i]) {\r\n                case Dependency.UserProfile:\r\n                    (<any>window).LoadSodByKey(\"userprofile\");\r\n                    spDependencies.push(\"userprofile\");\r\n                    break;\r\n                case Dependency.Publishing:\r\n                    SP.SOD.registerSod('SP.Publishing.js', SP.Utilities.Utility.getLayoutsPageUrl('sp.publishing.js'));\r\n                    spDependencies.push(\"SP.Publishing.js\");\r\n                    break;\r\n                case Dependency.Taxonomy:\r\n                    SP.SOD.registerSod('sp.taxonomy.js', SP.Utilities.Utility.getLayoutsPageUrl('sp.taxonomy.js'));\r\n                    spDependencies.push(\"sp.taxonomy.js\");\r\n                    break;\r\n                default:\r\n                    throw \"Depenency not implemented\";\r\n            }\r\n        }\r\n        SP.SOD.loadMultiple(spDependencies, () => {\r\n            deferred.resolve();\r\n        });\r\n        return deferred.promise();\r\n    }\r\n    private peekLastCommand() {\r\n        if (this.commands.length) {\r\n            return this.commands[this.commands.length - 1];\r\n        }\r\n        return null;\r\n    }\r\n    private peekLastResult() {\r\n        if (this.results.length) {\r\n            return this.results[this.results.length - 1];\r\n        }\r\n        return null;\r\n    }\r\n    private getAvailableActionCommandCount(): number {\r\n        var count = 0;\r\n        for (var i = 0; i < this.commands.length; i++) {\r\n            if (this.commands[i].constructor === ActionCommand) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n}\r\nexport enum NavigationLocation {\r\n    TopNavigation,\r\n    Quicklaunch\r\n}\r\nexport enum NavigationType {\r\n    Inherit,\r\n    Managed,\r\n    StructuralWithSiblings,\r\n    StructuralChildrenOnly\r\n}\r\nexport enum Dependency {\r\n    Publishing,\r\n    UserProfile,\r\n    Taxonomy\r\n}\r\nexport interface ISettings {\r\n    timeoutMilliseconds?: number,\r\n    enableDependencyTimeout?: boolean\r\n}\r\nexport class FluentCommand {\r\n    action: any;\r\n}\r\nexport class ActionCommand extends FluentCommand {\r\n    name: string;\r\n}\r\nexport class ActionResult {\r\n    name: string;\r\n    success: boolean;\r\n    result: Array<any>;\r\n}\r\nexport interface KeyValuePair {\r\n    key: string;\r\n    value: any;\r\n}\r\nexport class WhenCommand extends FluentCommand { }\r\nexport type OnExecuting = (commandName: string, step: number, total: number) => any;\r\nexport type OnExecuted = (commandName: string, success: boolean, result: Array<any>) => any;\r\n"],"sourceRoot":""}